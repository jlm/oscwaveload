use Unitwise::

module OscWave
  class Wave
    @logger: Logger

    @data: Array[Float]

    @others: untyped

    @pos: Integer

    @min: (Float|nil)

    @max: (Float|nil)

    @midpoint: Float

    @high_t: Float

    @low_t: Float

    @levels: Array[LevelEntry]

    attr_accessor timebase: untyped

    attr_accessor rate: untyped

    attr_accessor amplitude: untyped

    attr_accessor amplres: untyped

    attr_accessor data_unit: untyped

    attr_accessor data_points: untyped

    attr_accessor data: untyped

    attr_accessor pos: untyped

    attr_accessor levels: untyped

    class Wave::Indeterminate < RuntimeError
    end

    def initialize: (untyped wave, ?logger: untyped) -> void

    def get_position: (Integer|Point|LevelEntry) -> Integer

    def sample_period: () -> untyped

    def next_low: () -> (untyped | nil)

    def next_high: () -> (untyped | nil)

    def next_edge: () -> (untyped | nil)

    def level_at: (Integer)-> Symbol

    def current_level: () -> Symbol

    def extract_levels: () -> untyped

    def format_time: (untyped time) -> untyped

    def multiplier: (untyped num, untyped mul) -> untyped

    def find_pulse: ((Integer|Point|LevelEntry) start, (Symbol|Integer|LevelEntry::Level) level, Array[Numeric] pulse_width, Hash[Symbol, untyped] options) -> (LevelEntry|nil)

    private

    FLOAT_REGEX: ::Regexp

    def parse_float_unit: (String str) -> Unitwise
  end
end
